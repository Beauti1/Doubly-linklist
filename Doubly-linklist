#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
struct node
{
        int data;
        struct node *next;
        struct node *prev;
}*start;


create_list()
{
        int data;
        struct node *q,*temp;
        temp=malloc(sizeof (struct node));
        q=malloc (sizeof (struct node));
        printf("Enter the data:");
        scanf("%d",&data);
        q=start;
        temp->data=data;
        temp->next=NULL;
        if(start==NULL)
        {
            temp->prev=NULL;
            start=temp;
        }
        else
        {
                q=start;
                while(q-> next!=NULL)
                {
                        q=q->next;
                }
                q->next=temp;
                temp->prev=q;
        }
}

display()
{
        struct node *q;
        q=malloc(sizeof (struct node));
        q=start;
        printf("List is:\n");
        while(q!=NULL)
        {
                printf("%d\n",q->data);
                q=q->next;
        }
        if(start==NULL)
        {
                printf("List is empty \n");
        }

}

insert_beg()
{
    int data;
    struct node *temp;
    temp=malloc (sizeof(struct node));
    printf("Enter the data:");
    scanf("%d",&data);
    temp->data=data;
    temp->prev=NULL;
    temp->next=start;
    start->prev=temp;
    start=temp;
}

insert_end()
{
    int data;
    struct node *temp, *q;
    temp=malloc(sizeof(struct node));
    q=malloc (sizeof(struct node));
    temp->prev=NULL;
    temp->next=NULL;
    printf("Enter the data:");
    scanf("%d",&data);
    temp->data=data;
    temp->next=NULL;
    q=start;
    if (start==NULL) {

        start=temp;
    }
    else {
        while (q->next != NULL)
        {
            q=q->next;
        }
        temp->prev=q;
        q->next=temp;
    }
}

delete_beg()
{
    struct node *temp;
    temp=malloc(sizeof(struct node));
    temp=start;
    temp->next->prev=NULL;
    start=temp->next;
    free(temp);
}

insert_mid()
{ 
    int data, pos, i = 1;
    struct node *temp, *newnode;
    newnode = malloc(sizeof(struct node));
    newnode->next = NULL;
    newnode->prev = NULL;
    printf("\nEnter position : ");
    scanf("%d", &pos);
    printf("\nEnter number to be inserted: ");
    scanf("%d", &data);
    newnode->data = data;
    temp = start;
    if (start == NULL) {
        start = newnode;
        newnode->prev = NULL;
        newnode->next = NULL;
    }
     else if (pos == 1) {
        newnode->next = start;
        newnode->next->prev = newnode;
        newnode->prev = NULL;
        start = newnode;
    }
    else {
        while (i < pos - 1) {
            temp = temp->next;
            i++;
        }
        newnode->next = temp->next;
        newnode->prev = temp;
        temp->next = newnode;
        temp->next->prev = newnode;
    }
}

reverse()
{
    struct node *p1,*p2,*p3;
    p1=malloc(sizeof (struct node));
    p2=malloc(sizeof (struct node));
    p3=malloc(sizeof (struct node));
    if(start->next==NULL)
    {
        printf("Only one element");
        return;
    }
    p1=start;
    p2=p1->next;
    p3=p2->next;
    p2->next=p1;
    p2->prev=p3;
    p1->next=NULL;
    p1->prev=p2;
    while(p3!=NULL)
    {
        p1=p2;
        p2=p3;
        p3->next=p1;
        p2->prev=p3;
    }
    start=p2;
}

int main()
{
        int choice,n,m,pos,i;
        start=NULL;
        while(1)
        {
                printf("\n1.Create list \n");
                printf("2.Display \n");
                printf("3.Insert at the beginning\n");
                printf("4.Insert at the end\n");
                printf("5.Delete at the beginning\n");
                printf("6.Reverse\n");
                printf("7.Quit\n");
                printf("\nEnter your choice:");
                scanf("%d",&choice);
                switch(choice)
                {
                        case 1: printf("How many nodes:");
                                scanf("%d",&n);
                                for(i=0;i<n;i++)
                                {
                                   create_list();
                                }
                                break;
                        case 2:
                                display();
                                break;
                        case 3:
                                insert_beg();
                                break;
                        case 4:
                                insert_end();
                                break;
                        case 5:
                                delete_beg();
                                break;
                        case 6:
                                reverse();
                                break;
                        case 7:
                                exit(1);
                                break;
                        default:
                                printf("Please enter a valid choice");
                }
        }
}
